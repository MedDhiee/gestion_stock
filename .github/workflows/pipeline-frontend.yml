name: gestion-stock Frontend Pipeline

on:
  push:
    branches:
      - master
    paths:
      - gestion_stock_ui/hb_electronics/**
      - Docker/frontend/**
      - 'docker-compose.yml'
      - .github/workflows/*-frontend.yml

jobs:
  build-image:
    name: Build FE Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract project version
        id: extract_version
        run: |
          cd gestion_stock_ui/hb_electronics
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: gestion_stock_ui/hb_electronics
          file: Docker/frontend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/gestiondestock-ui:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/gestiondestock-ui:${{ steps.extract_version.outputs.VERSION }}

#Intégrer SonarQube dans un pipeline frontend, c’est comme mettre un contrôle technique automatique sur ton code à chaque push. Ça te protège contre les erreurs subtiles, améliore la lisibilité, et augmente la fiabilité de ton application.
  #deploy:
   # name: Deploy Frontend
  #  runs-on: ubuntu-latest
   # needs: [ build-image ]
    #steps:

     # - name: Create deployment folder
      # run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

        # - name: Copy docker-compose file
      # run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

        #- name: Set ENV variable and deploy
          #run: |
          #  ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          # cd ci-cd
          # docker compose -f docker-compose.yml pull -q
          # docker compose -f docker-compose.yml up -d
          # EOF